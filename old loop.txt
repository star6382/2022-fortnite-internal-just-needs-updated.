//void Hook(UGameViewportClient* Viewport, UCanvas* Canvas)
//{
//	auto GWorld = (UWorld*)*(uintptr_t*)(Gworld);
//	auto GameInstance = GWorld->GameInstance();
//	auto LocalPlayer = GameInstance->LocalPlayers()->LocalPlayer();
//	auto Controller = LocalPlayer->PlayerController();
//	auto ViewportClient = LocalPlayer->ViewPortClient();
//	AcknowledgedPawn = Controller->AcknowledgedPawn();
//	static UFortKismetLibrary* FortKismetLibrary;
//	FortKismetLibrary = UFortKismetLibrary::StaticClass();
//	if (config.Fov_cricle)
//	{
//		KGUI::DrawCircle(Canvas->SZE() / 2, (config.Fov_cricle_value * Canvas->SZE().x / config.angle) / 2, { 1,1,1,1 }, 128);
//	}
//
//	if (Controller->WasInputKeyJustPressed(keys::Insert))menu_opened = !menu_opened;
//	{
//		if (menu_opened)
//		{
//			KGUI::SetupCanvas(Canvas);
//			GUI::Input::Handle();
//			lit_menu();
//		}
//	}
//
//	auto Players = FortKismetLibrary->GetFortPawn((UObject*)GWorld);
//	for (int i = 0; i < Players.Num(); i++)
//	{
//		AFortPawn* Player = Players[i];
//		if (!id::Get_id(Controller, Player)) continue;
//		{
//			if (!Player || Player == AcknowledgedPawn || !Player->RootComponent() || !Player->Mesh()) continue;
//			{
//				FLinearColor esp_color = { 1.f, 1.f, 1.f, 1.f };
//
//				if (config.visble_check)
//				{
//					bool Visible = Controller->LineOfSightTo(Player);
//					if (Visible)
//						esp_color = FLinearColor(1.f, 1.f, 1.f, 1.f);
//					else
//						esp_color = FLinearColor(1.f, 0.f, 0.f, 1.f);
//				}
//				if (config.SkeletonESP)
//				{
//					//Canvas->DrawLine(id::s_head, id::s_neck, 1.f, esp_color);
//					Canvas->DrawLine(id::s_neck, id::s_chest, 1.f, esp_color);
//					Canvas->DrawLine(id::s_chest, id::s_pelvis, 1.f, esp_color);
//					Canvas->DrawLine(id::s_chest, id::s_rshoulder, 1.f, esp_color);
//					Canvas->DrawLine(id::s_rshoulder, id::s_relbow, 1.f, esp_color);
//					Canvas->DrawLine(id::s_relbow, id::s_rhand, 1.f, esp_color);
//					//Canvas->DrawLine(id::s_pelvis, id::s_rthigh, 1.f, esp_color);
//					Canvas->DrawLine(id::s_rthigh, id::s_rknee, 1.f, esp_color);
//					Canvas->DrawLine(id::s_rknee, id::s_rfoot, 1.f, esp_color);
//					Canvas->DrawLine(id::s_rfoot, id::s_rfootout, 1.f, esp_color);
//					Canvas->DrawLine(id::s_chest, id::s_lshoulder, 1.f, esp_color);
//					Canvas->DrawLine(id::s_lshoulder, id::s_lelbow, 1.f, esp_color);
//					Canvas->DrawLine(id::s_lelbow, id::s_lhand, 1.f, esp_color);
//					Canvas->DrawLine(id::s_pelvis, id::s_lthigh, 1.f, esp_color);
//					Canvas->DrawLine(id::s_lthigh, id::s_lknee, 1.f, esp_color);
//					Canvas->DrawLine(id::s_lknee, id::s_lfoot, 1.f, esp_color);
//					Canvas->DrawLine(id::s_lfoot, id::s_lfootout, 1.f, esp_color);
//				}
				/*if (config.Box)
				{
					float BoxHeight = (float)(id::s_bottom_2.y - id::s_head_2.y);
					float BoxWidth = BoxHeight * 0.50f;
					Canvas->DrawLine(Vector2(id::s_head_2.x - BoxWidth / 2, id::s_bottom_2.y), Vector2(id::s_head_2.x + BoxWidth / 2, id::s_bottom_2.y), 1.f, esp_color);
					Canvas->DrawLine(Vector2(id::s_head_2.x + BoxWidth / 2, id::s_bottom_2.y), Vector2(id::s_head_2.x + BoxWidth / 2, id::s_head_2.y), 1.f, esp_color);
					Canvas->DrawLine(Vector2(id::s_head_2.x + BoxWidth / 2, id::s_head_2.y), Vector2(id::s_head_2.x - BoxWidth / 2, id::s_head_2.y), 1.f, esp_color);
					Canvas->DrawLine(Vector2(id::s_head_2.x - BoxWidth / 2, id::s_head_2.y), Vector2(id::s_head_2.x - BoxWidth / 2, id::s_bottom_2.y), 1.f, esp_color);
				}*/
//			}
//		}
//
//		return ((void(*)(UGameViewportClient*, UCanvas*))(Orig))(Viewport, Canvas);
//	}
//}